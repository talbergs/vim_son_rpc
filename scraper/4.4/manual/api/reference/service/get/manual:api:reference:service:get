===== service.get =====

==== Description ====

''integer/array service.get(object **parameters**)''

The method allows to retrieve services according to the given parameters.

==== Parameters ====

''(object)'' Parameters defining the desired output.

The method supports the following parameters.

^ Parameter ^ Type ^ Description ^
| serviceids | string/array | Return only services with the given IDs. |
| parentids | string/array | Return only services with the given hard-dependent parent services. |
| childids | string/array | Return only services that are hard-dependent on the given child services. |
^ |||
| selectParent | query | Return a ''parent'' property with the hard-dependent parent service. |
| selectDependencies | query | Return a ''dependencies'' property with child service dependencies. |
| selectParentDependencies | query | Return a ''parentDependencies'' property with parent service dependencies. |
| selectTimes | query | Return a ''times'' property with service times. |
| selectAlarms | query | Return an ''alarms'' property with service alarms. |
| selectTrigger | query | Return a ''[[:manual/api/reference/trigger/object|trigger]]'' property with the associated trigger. |
^ |||
| sortfield | string/array | Sort the result by the given properties. \\ \\ Possible values are: ''name'' and ''sortorder''.  |
| countOutput |boolean|These parameters being common for all ''get'' methods are described in detail in the [[manual:api:reference_commentary#common_get_method_parameters|reference commentary]].  |
| editable |boolean|:::|
| excludeSearch |boolean|:::|
| filter | object |:::|
| limit |integer|:::|
| output |query|:::|
| preservekeys |boolean|:::|
| search | object |:::|
| searchByAny |boolean|:::|
| searchWildcardsEnabled |boolean|:::|
| sortorder | string/array | ::: |
| startSearch |boolean|:::|
==== Return values ====

''(integer/array)'' Returns either:
  * an array of objects;
  * the count of retrieved objects, if the ''countOutput'' parameter has been used.

==== Examples ====

=== Retrieving all services ===

Retrieve all data about all services and their dependencies.

Request:
<code java>
{
    "jsonrpc": "2.0",
    "method": "service.get",
    "params": {
        "output": "extend",
        "selectDependencies": "extend"
    },
    "auth": "038e1d7b1735c6a5436ee9eae095879e",
    "id": 1
}
</code>

Response:
<code java>
{
    "jsonrpc": "2.0",
    "result": [
        {
            "serviceid": "2",
            "name": "Server 1",
            "status": "0",
            "algorithm": "1",
            "triggerid": "0",
            "showsla": "1",
            "goodsla": "99.9000",
            "sortorder": "0",
            "dependencies": []
        },
        {
            "serviceid": "3",
            "name": "Data center 1",
            "status": "0",
            "algorithm": "1",
            "triggerid": "0",
            "showsla": "1",
            "goodsla": "99.9000",
            "sortorder": "0",
            "dependencies": [
                {
                    "linkid": "11",
                    "serviceupid": "3",
                    "servicedownid": "2",
                    "soft": "0",
                    "sortorder": "0",
                    "serviceid": "2"
                },
                {
                    "linkid": "10",
                    "serviceupid": "3",
                    "servicedownid": "5",
                    "soft": "0",
                    "sortorder": "1",
                    "serviceid": "5"
                }
            ]
        },
        {
            "serviceid": "5",
            "name": "Server 2",
            "status": "0",
            "algorithm": "1",
            "triggerid": "0",
            "showsla": "1",
            "goodsla": "99.9900",
            "sortorder": "1",
            "dependencies": []
        }
    ],
    "id": 1
}
</code>

==== Source ====

CService::get() in //frontends/php/include/classes/api/services/CService.php//.
